{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\Pract\\\\create-react-app\\\\Components\\\\CommentsLists.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nexport default function CommentList(_ref) {\n  var postid = _ref.postid;\n  console.log({\n    postid: postid\n  });\n\n  var fetchComments = function fetchComments() {\n    var res, comments;\n    return _regeneratorRuntime.async(function fetchComments$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(\"/comments?postId=\".concat(postid)));\n\n          case 2:\n            res = _context.sent;\n            comments = _objectSpread({}, res.data);\n            console.log(comments);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, comments.map(function (comment) {\n    return __jsx(\"li\", {\n      key: comment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, comment.body);\n  })));\n}","map":{"version":3,"sources":["D:/Pract/create-react-app/Components/CommentsLists.js"],"names":["axios","CommentList","postid","console","log","fetchComments","get","res","comments","data","map","comment","id","body"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,WAAT,OAA+B;AAAA,MAATC,MAAS,QAATA,MAAS;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA,MAAM,EAANA;AAAD,GAAZ;;AACJ,MAAMG,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACAL,KAAK,CAACM,GAAN,4BAA8BJ,MAA9B,EADA;;AAAA;AACZK,YAAAA,GADY;AAEZC,YAAAA,QAFY,qBAEGD,GAAG,CAACE,IAFP;AAGlBN,YAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAKI,SACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,QAAQ,CAACE,GAAT,CAAa,UAAAC,OAAO;AAAA,WACrB;AAAI,MAAA,GAAG,EAAEA,OAAO,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBD,OAAO,CAACE,IAA9B,CADqB;AAAA,GAApB,CADL,CADJ,CADJ;AAUH","sourcesContent":["import axios from 'axios'\r\n\r\nexport default function CommentList({postid}) {\r\n    console.log({postid})\r\nconst fetchComments = async () => {\r\n    const res = await axios.get(`/comments?postId=${postid}`)\r\n    const comments = {...res.data}\r\n    console.log(comments)\r\n}\r\n    return(\r\n        <>\r\n            <ul>\r\n                {comments.map(comment => (\r\n                <li key={comment.id}>{comment.body}\r\n                </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}