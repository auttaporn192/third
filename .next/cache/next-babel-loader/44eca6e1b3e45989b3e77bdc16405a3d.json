{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  var _usestate = usestate([]),\n      _usestate2 = _slicedToArray(_usestate, 2),\n      data = _usestate2[0],\n      setData = _usestate2[1];\n\n  var fetchData = function fetchData() {\n    var res;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(url));\n\n          case 2:\n            res = _context.sent;\n            setData(res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, [url]);\n  return data;\n}\n\nexport default useFetch;","map":{"version":3,"sources":["D:/Pract/create-react-app/Lib/useFetch.js"],"names":["axios","useState","useEffect","useFetch","url","usestate","data","setData","fetchData","get","res"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAsB;AAAA,kBACIC,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,MACZC,IADY;AAAA,MACPC,OADO;;AAGlB,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACIR,KAAK,CAACS,GAAN,CAAUL,GAAV,CADJ;;AAAA;AACRM,YAAAA,GADQ;AAEdH,YAAAA,OAAO,CAACG,GAAG,CAACJ,IAAL,CAAP;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKAJ,EAAAA,SAAS,CAAC,YAAM;AACZM,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACJ,GAAD,CAFM,CAAT;AAIA,SAAOE,IAAP;AACH;;AAED,eAAeH,QAAf","sourcesContent":["import axios from 'axios'\r\nimport {useState, useEffect} from 'react'\r\nfunction useFetch(url){\r\n    const[data,setData] = usestate([])\r\n\r\n    const fetchData = async () => {\r\n        const res = await axios.get(url)\r\n        setData(res.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [url])\r\n\r\n    return data\r\n}\r\n\r\nexport default useFetch"]},"metadata":{},"sourceType":"module"}